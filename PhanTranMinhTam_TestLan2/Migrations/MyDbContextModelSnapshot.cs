// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhanTranMinhTam_TestLan2.Data;

#nullable disable

namespace PhanTranMinhTam_TestLan2.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PhanTranMinhTam_TestLan2.Data.Music", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaId"), 1L, 1);

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("MediaId");

                    b.ToTable("Musics");
                });

            modelBuilder.Entity("PhanTranMinhTam_TestLan2.Data.PlaySchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"), 1L, 1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MusicId")
                        .HasColumnType("int");

                    b.Property<int>("RecurrenceRuleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("int");

                    b.HasKey("ScheduleId");

                    b.HasIndex("MusicId");

                    b.HasIndex("TimeSlotId");

                    b.HasIndex("RecurrenceRuleId", "MusicId", "ScheduleId")
                        .IsUnique();

                    b.ToTable("PlaySchedule");
                });

            modelBuilder.Entity("PhanTranMinhTam_TestLan2.Data.RecurrenceRule", b =>
                {
                    b.Property<int>("RecurrenceRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecurrenceRuleId"), 1L, 1);

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<int>("Pattern")
                        .HasColumnType("int");

                    b.HasKey("RecurrenceRuleId");

                    b.ToTable("RecurrenceRules");
                });

            modelBuilder.Entity("PhanTranMinhTam_TestLan2.Data.TimeSlot", b =>
                {
                    b.Property<int>("TimeSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeSlotId"), 1L, 1);

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("TimeSlotId");

                    b.ToTable("TimeSlot");
                });

            modelBuilder.Entity("PhanTranMinhTam_TestLan2.Data.PlaySchedule", b =>
                {
                    b.HasOne("PhanTranMinhTam_TestLan2.Data.Music", "Musics")
                        .WithMany("Schedules")
                        .HasForeignKey("MusicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhanTranMinhTam_TestLan2.Data.RecurrenceRule", "RecurrenceRule")
                        .WithMany("Schedules")
                        .HasForeignKey("RecurrenceRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhanTranMinhTam_TestLan2.Data.TimeSlot", "timeSlot")
                        .WithMany("PlaySchedules")
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Musics");

                    b.Navigation("RecurrenceRule");

                    b.Navigation("timeSlot");
                });

            modelBuilder.Entity("PhanTranMinhTam_TestLan2.Data.Music", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("PhanTranMinhTam_TestLan2.Data.RecurrenceRule", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("PhanTranMinhTam_TestLan2.Data.TimeSlot", b =>
                {
                    b.Navigation("PlaySchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
